name: "CI"

on:
  pull_request:
    branches: [$default-branch]
  push:
    branches: [$default-branch]

# Permissions needed for EnricoMi test results publishing
permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  ci:
    runs-on: ubuntu-latest

    env:
      RACK_ENV: test
      RAILS_ENV: test

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Bundler
        uses: octanner/cache-action@v1
        with:
          package-manager: "bundler"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"

      - name: Configure Bundler
        run: |
          bundle config --local deployment true
          bundle config --local path vendor/bundle

      # Use a dedicate step for installing dependencies
      # This makes troubleshooting caching easier
      - name: Install Dependencies
        run: bundle install

      - name: bundler-audit
        run: bundle exec bundle-audit

      - name: brakeman
        run: bundle exec brakeman

      - name: rubocop
        run: bundle exec rubocop

      - name: reek
        run: bundle exec reek

      - name: Setup Database
        run: bin/rake db:setup

      - name: rspec
        run: |
          mkdir results
          bundle exec rspec --format progress --format RspecJunitFormatter --out results/rspec.xml

      - name: Uploading Artifacts - results
        uses: actions/upload-artifact@v4
        if: always()  # Run even if tests fail
        with:
          name: results
          path: results
          overwrite: true

      - name: Uploading Artifacts - coverage
        uses: actions/upload-artifact@v4
        if: always()  # Run even if tests fail
        with:
          name: coverage
          path: coverage
          overwrite: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()  # Run even if tests fail
        with:
          files: "**/results/**/*.xml"
          check_name: "Test Results"
          comment_mode: always
          compare_to_earlier_commit: true
          report_individual_runs: true
          check_run_annotations: "all tests"
          job_summary: true

      - name: Upload Coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: results/rspec.xml
